add_library(swiftOnoneSupport
  SwiftOnoneSupport.swift)
target_compile_options(swiftOnoneSupport PRIVATE
  -parse-stdlib
  "SHELL:-Xllvm -sil-inline-generics=false"
  # We have to disable validation of TBD files, because this module is
  # _explicitly_ special-cased to result in extra symbols generated by the
  # optimizer, meaning TBDGen can't (and shouldn't: it has to run
  # pre-optimization for performance) list them.
  "SHELL:-Xfrontend -validate-tbd-against-ir=none"
  "SHELL:-Xfrontend -check-onone-completeness"
  "SHELL:-Xfrontend -disable-access-control")
target_link_libraries(swiftOnoneSupport PRIVATE
  $<$<PLATFORM_ID:Darwin>:darwin-linker-support>)

if(CMAKE_SYSTEM_NAME STREQUAL Windows)
  # When building in Debug mode, the standard library provides the symbols that
  # we need and as such SwiftOnoneSupport does not need to provide any exported
  # interfaces.  This results in the import library beinging elided.  However,
  # we explicitly link against the SwiftOnoneSupport library when building
  # programs in Debug mode, and need the import library to be generated even if
  # nothing is exported.  Because we will still generate the DLL, create an
  # empty import library.
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/swiftSwiftOnoneSupport.def
    "LIBRARY swiftSwiftOnoneSupport\n"
    "EXPORTS\n")

  target_sources(swiftOnoneSupport PRIVATE
    ${CMAKE_CURRENT_BINARY_DIR}/swiftSwiftOnoneSupport.def)
  set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/swiftSwiftOnoneSupport.def
    PROPERTIES HEADER_FILE_ONLY TRUE)
endif()
